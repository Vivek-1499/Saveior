// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id            String      @id @default(uuid())
  clerkUserId   String      @unique
  email         String      @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budget        Budget[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")  //in data base it'l be called as users
}

model Account{
  id            String      @id @default(uuid())
  name          String?
  type          AccountType
  balance       Decimal     @default(0)
  isDefault     Boolean     @default(false)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)  //oncascade is used if the parent table is deleted so this child data should be deleted
  transactions  Transaction[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])  //using user id we'll search account
  @@map("accounts")
}

//limited options
enum AccountType{
  CURRENT
  SAVINGS
}

model Transaction{
  id            String      @id @default(uuid())
  type          TransactionType
  amount         Decimal
  description   String?     
  date          DateTime
  category      String
  receiptUrl    String?
  isRecurring   Boolean     @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate  DateTime?
  lastProcessed DateTime?   //last time recurring transaction was processed
  status        TransactionStatus  @default(COMPLETED)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)  
  accountId     String
  account       Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])  //using user id we'll search account
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType{
  INCOME
  EXPENSE
}

enum RecurringInterval{
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus{
  PENDING
  COMPLETED
  FAILED
}

model Budget{
  id           String      @id @default(uuid())
  amount       Decimal
  lastAlertSent DateTime?
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@map("budgets")
}